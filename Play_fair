#include <iostream>
#include <stdio.h>
#include <string>
#include <vector>
using namespace std;

class PlayFair
{
  public:

    PlayFair ();
    ~PlayFair () {}

    void setKey (string k)
     {
         key = k;
     }
    string getKey ()
    {
         return key;
    }

    string key_Without_Duplicate_Alphabet (string k);
    string encrypt (string str);


    void setMatrix ();
    void showMatrix ();

    int findRow (char ch);
    int findCol (char ch);

    char findLetter (int x_val, int y_val);

  private:

    char matrix[5][5];
    string key;
};

PlayFair::PlayFair ()
{

    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            matrix[i][j] = 0;
        }
    }
}

string PlayFair::key_Without_Duplicate_Alphabet (string k)
{
    string str_wo_dup;

    for (string::iterator it = k.begin(); it != k.end(); it++) {
	bool alphabet_exist = false;
	for (string::iterator it1 = str_wo_dup.begin(); it1 != str_wo_dup.end(); it1++) {
	    if (*it1 == *it) {
            alphabet_exist = true;
	    }
	}

        if (!alphabet_exist) {
            str_wo_dup.push_back(*it);
        }
    }

    return str_wo_dup;
}

void PlayFair::setMatrix ()
{
    string key1 = key_Without_Duplicate_Alphabet(getKey());

    int i_val, j_val;

    int count = 0;

    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 5; j++) {
	  if (count == key1.length()) break;
	  else {
	    matrix[i][j] = key1[(5 * i) + j];
	    count++;
	  }
      }
      if (count == key1.length())
        break;
    }

    for (int i = 0; i < 26; i++) {
	char ch = 65 + i;
	bool alphabet_exist = false;

	for (string::iterator it = key1.begin(); it != key1.end(); it++) {
	    if (ch == toupper(*it)) {
		alphabet_exist = true;
	    }
	}

	if (ch == 'J') alphabet_exist = true;

	bool exit = false;
	if (!alphabet_exist) {
	    for (int i = 0; i < 5; i++) {
		for (int j = 0; j < 5; j++) {
		    if (!isalpha(matrix[i][j])) {
			matrix[i][j] = toupper(ch);
			exit = true;
		    }
		    if (exit == true) break;
		}
		if (exit == true) break;
	    }
	}
    }
}

void PlayFair::showMatrix()
{
    for (int i = 0; i < 5; i++) {
	for (int j = 0; j < 5; j++) {
	    if (matrix[i][j] != 'I') cout << matrix[i][j] << "\t";
	    else cout << "I/J" << "\t";
	}
	cout << endl;
    }
    cout << endl;
}

int PlayFair::findRow (char ch)
{

    if (ch == 'j') ch = 'i';
    for (int i = 0; i < 5; i++) {
	for (int j = 0; j < 5; j++) {
	    if (matrix[i][j] == toupper(ch)) { return i; }
	}
    }
    return -1;
}

int PlayFair::findCol (char ch)
{

    if (ch == 'j') ch = 'i';
    for (int i = 0; i < 5; i++) {
	for (int j = 0; j < 5; j++) {
	    if (matrix[i][j] == toupper(ch)) { return j; }
	}
    }
    return -1;
}


string PlayFair::encrypt (string str)
{
    string output;

    for (int i = 0; i < str.length(); i = i + 2) {


	    output.push_back(matrix[findRow(str[i])][findCol(str[i + 1])]);
	    output.push_back(matrix[findRow(str[i + 1])][findCol(str[i])]);

    }

    return output;
}



int main () {
    PlayFair cipher;
    string key, input;

    cin>>key;

    cipher.setKey(key);
    cipher.setMatrix();

    cin>>input;

    cout << cipher.encrypt(input) << endl;



    return 0;
}
